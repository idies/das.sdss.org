'---------------------------------------------------------------------------
' Paradigm Plus 2.0, Copyright 1990-94 ProtoSoft Inc.  All Rights Reserved.
'
' FILE: checkin.scr - Script invoked by the File/Baseline command.
'
'---------------------------------------------------------------------------
'| Who | Date     | Description
'|-----|----------|---------------------------------------------------------
'| ER  | 2/15/94  | Initial implementation (compressed tar and PKZIP).
'|-----|----------|---------------------------------------------------------
'| ER  | 4/1/94   | Added support for PVCS, RCS, SCCS, and Softbench.
'|-----|----------|---------------------------------------------------------
'| ER  | 5/15/94  | Added limited error checking on input strings.
'|-----|----------|---------------------------------------------------------

'---------------------------------------------------------------------------
' PROCEDURE: ProjectCheckin
'
' Check project repository and diagram files into the chosen "CM" system.
'
' NOTE: To add support for a CM system other than those currently supported,
' use one of the existing "Baseline" procedures as a template and change the
' RUN statement to invoke the CM system's appropriate "check in" command.
'---------------------------------------------------------------------------
ProjectCheckin:
  PRINT
  PRINT "Project Baseline Script"
  PRINT "_____________________________________________________"
  PRINT
  PRINT "Current date and time is: ", Time$
  PRINT
  PRINT "Paradigm: ", Paradigm$
  PRINT "Project:  ", App$
  PRINT
  '
  ' First, figure out what project files there are and allocate an array of
  ' strings to hold them all.
  '
  nProjectFiles = 5                   ' APP/KEY/LNK/DBD/GRP repository files
  nProjectFiles = nProjectFiles + COUNT(Diagram)    ' plus the diagram files
  DIM aszProjectFiles$(nProjectFiles)
  aszProjectFiles$(1) = App$+".app"
  aszProjectFiles$(2) = App$+".key"
  aszProjectFiles$(3) = App$+".lnk"
  aszProjectFiles$(4) = App$+".dbd"
  aszProjectFiles$(5) = App$+".grp"
  nIndex = 6
  SELECT Document FROM Diagram
  FOREACH Diagram
    aszProjectFiles$(nIndex) = Diagram.Document
    nIndex = nIndex + 1
  NEXT
  '
  ' At this point we have built an array of strings containing the
  ' required files for this project in the aszProjectFiles$ variable.
  ' Now, print them out so that the user knows what files are involved
  ' in the baseline.
  '
  PRINT "The following files make up the current project repository:"
  FOR i = 1 TO nProjectFiles
    PRINT aszProjectFiles$(i)
  NEXT
  PRINT
  '
  ' Next, ask the user for a version number (revision) for the baseline.
  ' Currently, it MUST be entered in the form:
  '
  ' [major release digit].[minor release digit]
  '
  ' NOTE: Improved validation needs to be performed on the input string.
  '
  szVersion$ = ""
  WHILE szVersion$=""
    INPUT "Baseline version number (eg. 2.0):",szVersion$
    IF szVersion$="" THEN NOTE "Enter a numeric version in the form: [major version].[minor version]"
  WEND
  '
  ' The project must be closed in order to avoid file sharing violations
  ' and/or possible data loss. More accurately, ALL users with the current
  ' project open should close it before performing the baseline command.
  '
  Project.Close
  '
  ' Finally, invoke the appropriate "baseline" procedure and then re-open
  ' the project. The user will have to wait for a few minutes while the
  ' project is being baselined.
  '
  ' NOTE: To customize Paradigm Plus to invoke your particular CM system,
  ' uncomment out the appropriate procedure call and comment out the rest.
  '
  PRINT "The following command(s) were invoked to perform the baseline:"
' GOSUB PKZIPBaseline
  GOSUB TarZBaseline
' GOSUB PVCSBaseline
' GOSUB RCSBaseline
' GOSUB SCCSBaseline
' GOSUB SoftbenchBaseline
  Project.Open App$
  END

'---------------------------------------------------------------------------
' PROCEDURE: PKZIPBaseline
'
' Baseline the project using the DOS shareware PKZIP utility. The compressed
' file is named in the form: [project].[version]
'
' Because of DOS limitations, dot characters in the version string are
' replaced with underscores.
'
' A "response file" [project].rsp containing the list of project files is
' built. It is written to the current subdirectory.
'
' It is assumed that the PKZIP.EXE executable is in your path.
'---------------------------------------------------------------------------
PKZIPBaseline:
  OPEN App$+".rsp" FOR OUTPUT AS #1
  FOR i = 1 to nProjectFiles
    PRINT #1, aszProjectFiles$(i)
  NEXT
  CLOSE #1
  nIndex = INSTR(szVersion$,".")
  IF nIndex<>0 THEN
    szVersion$ = LEFT$(szVersion$,1)+"_"+RIGHT$(szVersion$,1)
  END IF
  PRINT "pkzip -rP -a "+App$+"."+szVersion$+" @"+App$+".rsp"
  RUN "pkzip -rP -a "+App$+"."+szVersion$+" @"+App$+".rsp"
  RETURN

'---------------------------------------------------------------------------
' PROCEDURE: TarZBaseline
'
' Baseline the project using Unix tar and compress commands. The compressed
' file is named in the form: [project].[version].Z
'---------------------------------------------------------------------------
TarZBaseline:
  OPEN App$+".rsp" FOR OUTPUT AS #1
  FOR i = 1 to nProjectFiles
    PRINT #1, aszProjectFiles$(i)
  NEXT
  CLOSE #1
  PRINT "tar cvf "+App$+"."+szVersion$+" "+App$+".rsp"
  RUN "tar cvf "+App$+"."+szVersion$+" "+App$+".rsp"
  FOR i = 1 to nProjectFiles
    PRINT "tar rvf "+App$+"."+szVersion$+" "+aszProjectFiles$(i)
    RUN "tar rvf "+App$+"."+szVersion$+" "+aszProjectFiles$(i)
  NEXT
  IF EXIST(File,App$+"."+szVersion$+".Z") THEN
    RUN "rm "+App$+"."+szVersion$+".Z"
  END IF
  PRINT "compress "+App$+"."+szVersion$
  RUN "compress "+App$+"."+szVersion$
  RETURN

'---------------------------------------------------------------------------
' PROCEDURE: PVCSBaseline
'
' Baseline the project using the PVCS Version Manager PUT command.
'
' It is assumed that PVCS is installed and that the PUT.EXE executable
' is in your path.
'---------------------------------------------------------------------------
PVCSBaseline:
  INPUT "PVCS baseline description:",szDescription$
  OPEN App$+".rsp" FOR OUTPUT AS #1
  FOR i = 1 to nProjectFiles
    PRINT #1, aszProjectFiles$(i)
  NEXT
  CLOSE #1
  PRINT "put -y -l -M"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" @"+App$+".rsp"
  RUN "put -y -l -M"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" @"+App$+".rsp"
  RETURN

'---------------------------------------------------------------------------
' PROCEDURE: RCSBaseline
'
' Baseline the project using the RCS check-in command (ci).
'
' Paradigm Plus project repositories consist of multiple BINARY files,
' and RCS handles only TEXT files, so first the binary files are converted
' to ASCII text files by using the Unix uuencode command.
'
' It is assumed that RCS is installed and that the ci command is in
' your path.
'---------------------------------------------------------------------------
RCSBaseline:
  INPUT "RCS baseline description:",szDescription$
  FOR i = 1 to nProjectFiles
    PRINT "rm "+aszProjectFiles$(i)+".txt"
    RUN "rm "+aszProjectFiles$(i)+".txt"
    PRINT "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
    RUN "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
    PRINT "ci -f -m"+CHR$(34)+szDescription$+CHR$(34)+" -l"+szVersion$+" "+aszProjectFiles$(i)+".txt"
    RUN "ci -f -m"+CHR$(34)+szDescription$+CHR$(34)+" -l"+szVersion$+" "+aszProjectFiles$(i)+".txt"
  NEXT
  RETURN

'---------------------------------------------------------------------------
' PROCEDURE: SCCSBaseline
'
' Baseline the project using the SCCS check-in command.
'
' Paradigm Plus project repositories consist of multiple BINARY files,
' and SCCS handles only TEXT files, so first the binary files are converted
' to ASCII text files by using the Unix uuencode command.
'
' It is assumed that SCCS is installed and that the sccs command is in
' your path.
'
' NOTE: The SCCS integration has not been thoroughly tested. It is provided
'       as an example only.
'---------------------------------------------------------------------------
SCCSBaseline:
  INPUT "SCCS baseline description:",szDescription$
  FOR i = 1 to nProjectFiles
    PRINT "rm "+aszProjectFiles$(i)+".txt"
'    RUN "rm "+aszProjectFiles$(i)+".txt"
    PRINT "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
'    RUN "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
    PRINT "sccs deledit -m"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" "+aszProjectFiles$(i)+".txt"
'    RUN "sccs deledit -m"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" "+aszProjectFiles$(i)+".txt"
  NEXT
  RETURN

'---------------------------------------------------------------------------
' PROCEDURE: SoftbenchBaseline
'
' Baseline the project using the currently configured Softbench CM system
' and the Softbench-specific REQUEST script language command.
'
' It is assumed that Softbench is installed and configured appropriately.
'---------------------------------------------------------------------------
SoftbenchBaseline:
  INPUT "Softbench CM baseline description:",szDescription$
  FOR i = 1 to nProjectFiles
    ' Comment the following two lines out if your CM system supports binary
    ' files. Also, remove the +".txt" from the end of the REQUEST command.
    PRINT "rm "+aszProjectFiles$(i)+".txt"
    RUN "rm "+aszProjectFiles$(i)+".txt"
    PRINT "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
    RUN "uuencode "+aszProjectFiles$(i)+" "+aszProjectFiles$(i)+" > "+aszProjectFiles$(i)+".txt"
    PRINT "REQUEST CM, CHECK-IN -m"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" "+aszProjectFiles$(i)+".txt"
    RUN "REQUEST CM, CHECK-IN -m"+CHR$(34)+szDescription$+CHR$(34)+" -r"+szVersion$+" "+aszProjectFiles$(i)+".txt"
  NEXT
  RETURN
